module your-project

go 1.22

require (
    github.com/aws/aws-sdk-go-v2 v1.16.9
    github.com/aws/aws-sdk-go-v2/aws v1.16.9
    github.com/aws/aws-sdk-go-v2/config v1.16.9
    github.com/aws/aws-sdk-go-v2/service/sns v1.16.9
    github.com/confluentinc/confluent-kafka-go/kafka v1.8.2
    github.com/joho/godotenv v1.4.0
    go.uber.org/zap v1.19.1
)


SNS
package sns

import (
    "context"
    "encoding/json"
    "github.com/aws/aws-sdk-go-v2/aws"
    "github.com/aws/aws-sdk-go-v2/config"
    "github.com/aws/aws-sdk-go-v2/service/sns"
    "go.uber.org/zap"
)

type SNSClient struct {
    Client  *sns.Client
    TopicArn string
}

type Ocorrencia struct {
    Domain                      string `json:"domain"`
    DescricaoResumidaOcorrencia string `json:"descricaoResumidaOcorrencia"`
    DescricaoTraceOcorrencia    string `json:"descricaoTraceOcorrencia"`
    TextoMensagem               string `json:"textoMensagem"`
}

func NewSNSClient(region, topicArn string) (*SNSClient, error) {
    cfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(region))
    if err != nil {
        return nil, err
    }

    client := sns.NewFromConfig(cfg)
    return &SNSClient{
        Client:  client,
        TopicArn: topicArn,
    }, nil
}

func (s *SNSClient) PublishMessage(descricao, stacktrace, correlationID, message string) error {
    oc := Ocorrencia{
        Domain:                      "example-domain",
        DescricaoResumidaOcorrencia: descricao,
        DescricaoTraceOcorrencia:    stacktrace,
        TextoMensagem:               message,
    }

    msgOcorrencia, err := json.Marshal(oc)
    if err != nil {
        zap.L().Error("Erro ao converter ocorrencia para JSON", zap.Error(err))
        return err
    }

    input := &sns.PublishInput{
        TopicArn: aws.String(s.TopicArn),
        Message:  aws.String(string(msgOcorrencia)),
    }

    _, err = s.Client.Publish(context.TODO(), input)
    if err != nil {
        zap.L().Error("Erro ao enviar mensagem para o SNS", zap.Error(err))
        return err
    }

    return nil
}

kafka
package kafka

import (
    "context"
    "log"
    "os"
    "github.com/confluentinc/confluent-kafka-go/kafka"
    "github.com/joho/godotenv"
    "your-project/internal/sns"
    "go.uber.org/zap"
)

func StartConsumer(snsClient *sns.SNSClient) {
    err := godotenv.Load()
    if err != nil {
        log.Fatalf("Error loading .env file")
    }

    config := &kafka.ConfigMap{
        "bootstrap.servers": os.Getenv("KAFKA_BOOTSTRAP_SERVERS"),
        "group.id":          os.Getenv("KAFKA_GROUP_ID"),
        "auto.offset.reset": "earliest",
    }

    consumer, err := kafka.NewConsumer(config)
    if err != nil {
        log.Fatalf("Failed to create consumer: %s", err)
    }

    defer consumer.Close()

    topic := os.Getenv("KAFKA_TOPIC")
    consumer.SubscribeTopics([]string{topic}, nil)

    for {
        msg, err := consumer.ReadMessage(-1)
        if err != nil {
            zap.L().Error("Consumer error", zap.Error(err))
            continue
        }

        message := string(msg.Value)
        zap.L().Info("Message on", zap.String("topic", msg.TopicPartition.Topic), zap.String("message", message))

        err = snsClient.PublishMessage("descricao", "stacktrace", "correlationID", message)
        if err != nil {
            zap.L().Error("Failed to send message to SNS", zap.Error(err))
        } else {
            zap.L().Info("Message sent to SNS topic", zap.String("message", message))
        }
    }
}


main

package main

import (
    "log"
    "os"
    "your-project/internal/kafka"
    "your-project/internal/sns"
    "go.uber.org/zap"
)

func main() {
    logger, _ := zap.NewProduction()
    defer logger.Sync() // flushes buffer, if any
    zap.ReplaceGlobals(logger)

    region := os.Getenv("AWS_REGION")
    topicArn := os.Getenv("SNS_TOPIC_ARN")

    snsClient, err := sns.NewSNSClient(region, topicArn)
    if err != nil {
        log.Fatalf("Failed to create SNS client: %s", err)
    }

    kafka.StartConsumer(snsClient)
}


go build -o kafka-sns-consumer
./kafka-sns-consumer


docker
version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  go-app:
    build: .
    environment:
      - AWS_REGION=us-west-2
      - SNS_TOPIC_ARN=arn:aws:sns:us-west-2:123456789012:myTopic
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_GROUP_ID=myGroup
      - KAFKA_TOPIC=myTopic
    depends_on:
      - kafka


dockerfile
# Use a imagem base do Golang
FROM golang:1.22.2

# Defina o diretório de trabalho
WORKDIR /app

# Copie os arquivos do projeto para o diretório de trabalho
COPY . .

# Instale as dependências do Go
RUN go mod tidy

# Compile o aplicativo
RUN go build -o kafka-sns-consumer .

# Comando para rodar o aplicativo
CMD ["./kafka-sns-consumer"]

